{"path":"Lessons/Semester 2/microcontrolers/Lesson 9.pdf","text":"Lesson 9 1 Review: Function • Functions are sequences of code that can be reused at any point in a program. Equivalent to Subroutines in assembler • Helps manage program complexity • Easier to design and debug • Functions can often be reused instead of starting over • Can use of “libraries” of functions developed by 3rd parties, instead of designing your own • A function is “called” by another program to perform a task • The function may return a result to the caller • One or more arguments may be passed to the function/procedure • You must define (declare) before using the function 2 Review: Function definition int math_func (int n) { int j; //local variable j = n + 5; //function body return(j); //return the result } 3 Type of value to be returned to the caller* Parameters passed by the caller * If no return value, specify “void” Review: • Example 1: Write a C code to read the switches value on PORTC and display it on the seven- segment using predesigned library file: 1. Configure PORTC as input and PORTB as output 2. Download these files from itslearning and add to your project : SevenSegment.c, SevenSegment.h 3. Modify SevenSegment.c file for all values 4. #include \"SevenSegment.h\" in top of main.c file 5. Use SevenSegDisp(PINC); function to display values 4 Seven Segment Number Binary Value Negative Binary 0 01011111 0b10100000 1 00001100 0b11110011 2 3 4 5 6 7 8 9 5 PB6PB3PB2 PB1PB4PB0 PB5 PB7 Fuse Bits 6 ATMEGA32A fuse bits • There are few parameters in the AVR chip must be configured before it can be used for external environment. • These parameters are set with the use of Fuse Bits. • The fuse bit determines the behavior of the chip, what is the speed and voltage it runs at etc. • You don’t have to set the fuse bits every time you are using the controller till the time you want to use it under the same configuration. • Fuse bits need to be changed only in case you want to change the initial configuration of the controller. 7 ATMEGA32A fuse bits • ATmega32A fuse bits are used for basic configuration of ATmega32A processor such as: • Start-up time • Clock source & frequency • Brown-out level • The AVR microcontroller consists of sixteen fuse bits (two bytes) which are classified as low fuse and high fuse bytes. • Note! If fuse bits are incorrectly programmed, the microprocessor can become \"dead.\" 8 AVR Clock Source • There are two different clock sources: • Internal Calibrated RC Oscillator • External Sources: • RC Oscillator • External Clock • High Frequency XTAL Oscillator • Low Frequency XTAL Oscillator (32 KHz) 9 Clock Multiplexer Internal RC Oscillator External RC Oscillator External Clock XTAL HF XTAL LF to CPU Fuse bit Brown out detection • A brownout for a chip means that the power supply voltage is too low for the MCU to run reliably at the speed of the clock. • For example, the ATMEGA32 can run as fast as 16MHz but only if the power voltage is between 4.5V and 5.5V. • If the voltage is lower than that, it may behave erratically, erasing or overwriting the RAM and EEPROM. • It may also start running random piece of the code. • To keep it from doing that, we can set the brownout voltage to 4V, then if the voltage drops, the chip will turn off until the voltage returns. • It will then reset and start over. 11 Brown out detection 12 • The trigger level for the BOD can be selected by the fuse BODLEVEL to be 2.7V or 4.0V • The trigger level has a hysteresis to ensure spike free Brown-out Detection. • The hysteresis on the detection level should be interpreted as: • VBOT+ = VBOT + 25 mV • VBOT- = VBOT – 25 mV • When VCC decreases to a value below the trigger level (VBOT-) and stay for more than 2 us, the Brown-out Reset is activated. • When VCC increases above the trigger level (VBOT+), the delay counter starts the MCU after the Time-out period tTOUT has expired. Example 2: • Write a program in C to toggle LEDs every 1 second (using _delay_ms()) • A) Set ATMEGA32 to run with internal 1 MHz • B) Set ATMEGA32 to run with external High frequency XTAL • C) #define F_CPU 8000000 15 Digital Data Communication 16 Overview • Serial communication medium • Synchronous / asynchronous communication • Simplex, half duplex or full duplex • Universal Asynchronous Communication • UART - (Universal Asynchronous Receiver / Transmitter). • Data framing • Serial port programming 17 Digital Data Communication • Digital data communication is the transfer and reception of data in the form of a digital bitstream (0 and 1) and it is made up of: • Message: A piece of information that is to be transmitted • Sender: It is simply a device that sends data messages. • Receiver: It is a device that receives messages. • Communication Medium: Physical connection between two devices • Protocol: Set of rules to send and receive data 18 Sender Receiver Message Communication Medium ProtocolProtocol Serial and Parallel Communication • Data is transferred using two methods: • Parallel: • All the bits are transferred simultaneously • High speed • Need lot of wires: Impractical for long distances • Example: Old printers • Serial: • Bits are sent sequentially • Theoretically lower communication speed • Use common wire for all bits • Example: USB 19 D7 D6 D5 D4 D3 D2 D1 D0 Sender Receiver D7 D6 D5 D4 D3 D2 D1 D0 Sender Receiver 0 0 0 0 1 1 1 1 101 1 0 1 0 1 Serial Data Transfer • Two main methods in Serial Data transfer: • Synchronous • There is a common clock line between the Transmitter and Receiver • Data are captured at clock transition • Asynchronous • No common clock line between Transmitter and Receiver • Data are captured using internal clock based on predefined communication speed 20 Serial Communication • Two modes of Serial Communication: • Duplex: Data can be transmitted and Received • Full Duplex: Data can be sent and received simultaneously • Needs two wires for data • Half Duplex: Data can not be sent and received simultaneously • Needs one shared wire for data • Simplex • Data is only transmitted in one way 21 Transmitter Receiver Transmitter Receiver Receiver Transmitter Transmitter Receiver Receiver Transmitter SharedUART Protocol 22 UART: Universal Asynchronous Receiver and Transmitter • UART is one the most used device-to-device communication protocols: • Between Microcontroller and Sensor/Microcontroller • It is Full-Duplex Asynchronous Serial Protocol: • There is no clock between the transmitter and receiver • Data transmission is two-ways, same time 23 Transmitter Receiver Receiver Transmitter UART Protocol • In a data transfer, the data received at the receiving end is all 0s (Low Voltage) and 1s (High Voltage) • For example, if the line is always in high logic level (logic ONE), how to distinguish the data transmission with idle mode without clock? • Protocol: The sender and receiver must agree on how the data is packed, how many bits constitute a character, and when data begins and ends: • Transmit at the same (known) speed • There is no common clock line • Use the same frame structure 24 UART frame format • UART can transfer and receive data serially with different speed • UART frame consists of: • Start and Stop bits • Data bits (5 to 9 usually 8 bits) • Parity bit (optional ) for error detection • In the idle state (no data is transmitted), the line is held high • Start bit: The first bit of a UART transmission (logic 0). • Stop bit: The last bit of a UART transmission (logic 1). 25 Common UART Baud rates 4800 9600 19200 57600 115200 1000000 UART frame format • Data are typically sent with least significant bit (LSB) first • Example: • Data: 10010011 • Baud rate: 9600 • tb= 1/9600=104 µs • Parity: used for error detection • Even Parity: Number of 1s must be even • Odd Parity: Number of 1s must be odd 26 tb UART connection in AVR board 27 • FT232: • Single chip USB to UART interface/converter • Provides Virtual COM Port for PC UART Registers • In the AVR microcontroller five registers are associated with the UART: • UBRR (UART Baud Rate Register) • UCSRA,UCSRB, UCSRC (UART Control Status Register) • UDR (UART Data Register) 28 UBRR register and baud rate in the AVR • The AVR transfers and receives data serially at many different baud rates. • There are some standard baud rates for UART communication. • The baud rate in the AVR is programmable using UBRR register • BaudRate = Fosc/ (16(X + 1)) • X is the value we load into the UBRR register • X = Fosc/ (16×BaudRate) - 1 • Example: • Desired Baud-Rate=4800, Fosc= 1MHz, X=12.02 • X = 12 → Baud Rate=4808 29 Data Rate (bps) 1,200 2,400 4,800 9,600 19,200 38,400 57,600 115,200 UBRR register and baud rate in the AVR • UBBR register is 16-bit register • It is accessible by UBBRH and UBBRL • Only 12 bits of are used to set the USART baud rate • UBBR = Fosc/ 16(BaudRate) – 1 30 Data Rate (bps) 1,200 2,400 4,800 9,600 19,200 38,400 57,600 115,200 UBRRH UBRRL UART: UDR 31 • Two registers as Transmit Register and Receive Register, they have same register address and name. • When you write data to UDR register is written to UDR (Write) • When you read data from UDR register is read from UDR (Read) UCSRA: UART Control and Status Register A 32 • B7: RXC: UART Receive Complete Flag • B6: TXC: UART Transmit Complete Flag • B5: UDRE: UART Data Register Empty • B4: FE: Frame Error • B3: DOR: Data OverRun • B2: PE: Parity Error • B1: U2X: Double the UART Transmission Speed • B0: MPCM: Multi-processor Communication Mode UCSRB: UART Control and Status Register B 33 • B7: RXCIE: RX Complete Interrupt Enable • B6: TXCIE: TX Complete Interrupt Enable • B5: UDRIE: UART Data Register Empty Interrupt Enable • B4: RXEN: Receiver Enable • B3: TXEN: Transmitter Enable • B2: UCSZ2: Character Size (1: 9 bit, 0: 8 bit) • B1: RXB8: Receive Data Bit 8 • B0: TXB8: Transmit Data Bit 8 UCSRC: UART Control and Status Register C 34 • B7: URSEL: Register Select • B6: UMSEL: USART Mode Select • B5,4: UPM1:0: Parity Mode (Disabled, Enabled, 1, 2) • B3: USBS: Stop Bit Select (1, 2) • B2,1: UCSZ1:0: Character Size • B0: UCPOL: Clock Polarity Default: 8-bit data, rising edge, 1 Stop bit, Parity disabled UART: How to program UART to send and receive data in pooling mode 35 • Enable UART TX and RX in UCSRB • TXEN: Set Transmitter Enable bit • RXEN: Set Receiver Enable bit • Calculate and configure Baud Rate: UBRR Registers • UBBR = Fosc/ 16(BaudRate) - 1 • To send data: • Wait for UDRE: USART Data Register Empty Flag to send new data • Write to UDR Register • To receive data: • Wait for RXC: UART Receive Complete Flag to receive new data • Read from UDR Register Example 3 • A) Write a C code to send numbers from 0 to 255 every 1 second, by UART protocol to your PC (UART Speed = 9600) • B) Write a C code to Listen to UART port to receive data from the user When data is received, display the received data using LEDs on PORTB 36 Example 3, A #define F_CPU 8000000 #include <avr/io.h> #include <util/delay.h> int main(void) { UBRRH = ???;/* Config data rate */ UBRRL = ???;/* Config data rate */ UCSRB = ???;/* Enable transmitter */ while (1) { for(int m=0;m<255;m++) { _delay_ms(1000); while ( !( UCSRA & (1<<UDRE)) ); /* Wait if UART Output Data Register is not empty */ UDR = ???; /* send data out */ } } } 37 Example 3, B #define F_CPU 8000000 #include <avr/io.h> #include <util/delay.h> int main(void) { UBRRH = ???; /* Config data rate */ UBRRL = ???; /* Config data rate */ UCSRB = ???; /* Enable Receiver */ DDRB = ????; while (1) { while (!( UCSRA & (1<<RXC))); /* Wait here if UART input Data Register is empty*/ PORTB=~UDR; } } 38 ASCII Coding 39 ASCII Coding • ASCII stands for American Standard Code for Information Interchange • ASCII code is the numerical representation of a character such as 'a' or '@’ or ‘ 1 ’ or an action such as new line • It is mostly used to send and receive text data • Every character or action on the keyboard has an 8 bit (1 Byte) ASCII code between 0 and 255 40 ASCII Code table 41 Defining an ASCII character in C programing • To define a characters in C language we can define: uint8_t data='a'; • Same as writing: uint8_t data=97; • To define a set of characters in C language, array of data can be used • uint8_t data[12]=\"AVR ATMEGA32\"; • uint8_t data[]=\"AVR ATMEGA32\"; 42 Example 4 • Write a C code to send character from 'a' every 1 second using UART Protocol 43 Example 4 #define F_CPU 8000000 #include <avr/io.h> #include <util/delay.h> int main(void) { uint8_t data=???; UBRRH = ???; /* Config data rate */ UBRRL = ???; /* Config data rate */ UCSRB = ???; /* Enable Transmitter */ while (1) { _delay_ms(1000); while ( ????? ); /* Wait if UART output Data Register is not empty*/ UDR=data; } } 44 Assignment 1. Write a C code to send your name every 1 second using UART Protocol 2. Write a C code to wait for a command from the UART port. If the received command by UART is equal to ‘n’, then send your name by UART 45","libVersion":"0.2.4","langs":""}