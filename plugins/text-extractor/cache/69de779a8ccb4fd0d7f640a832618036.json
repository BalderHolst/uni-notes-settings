{"path":"Lessons/Semester 2/Kinematik/Lecture 8 - Inverse Kinematics.pdf","text":"Lecture 8: Inverse Kinematics Iñigo Iturrate Assistant Professor SDU Robotics, The Maersk McKinney Moller Institute, University of Southern Denmark inju@mmmi.sdu.dk Ø27-604-3 2 What are we doing today? 1. CAD Modelling in Autodesk Inventor – Guest Lecture by Aljaz Kramberger 2. CAD Assemblies in Autodesk Inventor – Guest Lecture by Aljaz Kramberger 3. Introduction to Robotics & Recap of Linear Algebra and Mathematical Notation 4. Translations & Rotation Matrices 5. Other Representations for Orientation 6. Transformation Matrices 7. DH Parameters & Forward Kinematics 8. Inverse Kinematics (Today) 9. Kinematic Simulation 10. Velocity Kinematics & the Jacobian Matrix 11. More about the Jacobian & Trajectory Generation 12. Manipulability, More on the Robotic Systems Toolbox 3 Last time we saw… We can describe a robot’s kinematic structure using DH parameters. Forward Kinematics describes how motions of the joints translate into motion of the end-effector: • We can obtain the Forward Kinematics from the DH parameters. • We can also derive the forward kinematics from transformations between frames. ??? 4 Recap: DH Parameters 𝑎𝑎𝑖𝑖−1 𝛼𝛼𝑖𝑖−1 Link i-1 Axis i Link i 𝜃𝜃𝑖𝑖 𝑑𝑑𝑖𝑖�𝒁𝒁𝑖𝑖−1 �𝒁𝒁𝑖𝑖 𝑎𝑎𝑖𝑖 �𝑿𝑿𝑖𝑖 �𝑿𝑿𝑖𝑖−1 �𝒀𝒀𝑖𝑖−1 �𝒀𝒀𝑖𝑖 Axis i-1 Using Modified (Craig) DH Parameters: We can describe a whole robot by attaching frames to links: • Z-axis of frame {𝑖𝑖} is coincident with joint axis 𝑖𝑖. • X-axis of frame {𝑖𝑖} points along 𝑎𝑎𝑖𝑖 in the direction from joint 𝑖𝑖 to joint 𝑖𝑖 + 1. Then, we can assign four parameters to each link: • 𝜶𝜶𝒊𝒊 – The angle from �𝒁𝒁𝑖𝑖 to �𝒁𝒁𝑖𝑖+1measured about �𝑿𝑿𝑖𝑖 • 𝒂𝒂𝒊𝒊 – The distance from �𝒁𝒁𝑖𝑖 to �𝒁𝒁𝑖𝑖+1measured along �𝑿𝑿𝑖𝑖 • 𝒅𝒅𝒊𝒊 – The distance from �𝑿𝑿𝑖𝑖−1to �𝑿𝑿𝑖𝑖 measured along �𝒁𝒁𝑖𝑖 • 𝜽𝜽𝒊𝒊 – The angle from �𝑿𝑿𝑖𝑖−1to �𝑿𝑿𝑖𝑖 measured about �𝒁𝒁𝑖𝑖 5 Recap: FK from Modified DH Parameters 𝑖𝑖 𝑖𝑖−1𝑻𝑻 = 𝑹𝑹𝑋𝑋 𝛼𝛼𝑖𝑖−1 𝑫𝑫𝑋𝑋 𝑎𝑎𝑖𝑖−1 𝑫𝑫𝑍𝑍(𝑑𝑑𝑖𝑖)𝑹𝑹𝑍𝑍(𝜃𝜃𝑖𝑖) = 1 0 0 0 0 𝑐𝑐𝛼𝛼𝑖𝑖−1 −𝑠𝑠𝛼𝛼𝑖𝑖−1 0 0 𝑠𝑠𝛼𝛼𝑖𝑖−1 𝑐𝑐𝛼𝛼𝑖𝑖−1 0 0 0 0 1 1 0 0 𝑎𝑎𝑖𝑖−1 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 𝑑𝑑𝑖𝑖 0 0 0 1 𝑐𝑐𝜃𝜃𝑖𝑖 −𝑠𝑠𝜃𝜃𝑖𝑖 0 0 𝑠𝑠𝜃𝜃𝑖𝑖 𝑐𝑐𝜃𝜃𝑖𝑖 0 0 0 0 1 0 0 0 0 1 = 𝑐𝑐𝜃𝜃𝑖𝑖 −𝑠𝑠𝜃𝜃𝑖𝑖 0 𝑎𝑎𝑖𝑖−1 𝑠𝑠𝜃𝜃𝑖𝑖𝑐𝑐𝛼𝛼𝑖𝑖−1 𝑐𝑐𝜃𝜃𝑖𝑖𝑐𝑐𝛼𝛼𝑖𝑖−1 −𝑠𝑠𝛼𝛼𝑖𝑖−1 −𝑠𝑠𝛼𝛼𝑖𝑖−1𝑑𝑑𝑖𝑖 𝑠𝑠𝜃𝜃𝑖𝑖𝑠𝑠𝛼𝛼𝑖𝑖−1 𝑐𝑐𝜃𝜃𝑖𝑖𝑠𝑠𝛼𝛼𝑖𝑖−1 𝑐𝑐𝛼𝛼𝑖𝑖−1 𝑐𝑐𝛼𝛼𝑖𝑖−1𝑑𝑑𝑖𝑖 0 0 0 1 These variables are always fixed This is fixed for a revolute joint This is fixed for a prismatic joint 6 Today… What if we want to do the opposite? In most tasks, we will have a defined task motion that the robot needs to follow in Cartesian space, not a defined joint space motion. The problem then becomes: “Given a target position and orientation of the robot end-effector, what joint position values will reach that target?” ? ? ? 7 Topics for Today Part I: Joint and Cartesian Spaces • Joint space & Cartesian space • Mapping between them (Forward and Inverse Kinematics) Part II: Inverse Kinematics • Closed-form vs. Numerical solutions • Examples of closed-form solutions for 2R Planar Manipulator & Universal Robots (6R Manipulator) Part III: Practical Considerations • Workspace in relation to IK • DOF vs number of IK solutions • Choice of IK solutions • Repeatability and Accuracy Part I: Joint and Cartesian Spaces & Mapping between Them 9 Joint & Cartesian Spaces In robotics, we are constantly working with two different spaces: • Joint (or Operational) space  The space where the robot actually operates.  Defines how its joints (and their associated motors) actually move.  It is the space we have direct (low-level) control over. • Cartesian (or Task) space • “Our world”, where we want the robot to actually act and perform a task. • Defines how the end-effector/tool of the robot should move. • We cannot control it directly (at a low level). 10 Joint (Configuration) Space The dimensionality of the space will depend on the number and kind of joints (i.e. DOF) in the robot. For an 𝑛𝑛-DOF robot: • Positions in joint space are given by 𝒒𝒒 ∈ ℝ𝑛𝑛: 𝒒𝒒 = 𝑞𝑞1 ⋮ 𝑞𝑞𝑛𝑛 • Velocities are given by ̇𝒒𝒒 ∈ ℝ𝑛𝑛: ̇𝒒𝒒 = ̇𝑞𝑞1 ⋮ ̇𝑞𝑞𝑛𝑛 • Accelerations are given by ̈𝒒𝒒 ∈ ℝ𝑛𝑛: ̈𝒒𝒒 = ̈𝑞𝑞1 ⋮ ̈𝑞𝑞𝑛𝑛 Where each 𝑞𝑞𝑖𝑖 is: • An angle 𝜃𝜃 for revolute joints • A displacement 𝑑𝑑 for prismatic joints 11 Cartesian (Task) Space The dimensionality of the space will depend on the kind of task. Usually, we will work in a 3D environment. For a 3D environment: • Poses in Cartesian space are usually described by 𝐱𝐱 ∈ ℝ6: 𝒙𝒙 = 𝒑𝒑 𝝓𝝓 • Velocities are usually given by ̇𝒙𝒙 ∈ ℝ6: ̇𝒙𝒙 = 𝒗𝒗 = ̇𝒑𝒑 ̇𝝓𝝓 or ̇𝒙𝒙 = ̇𝒑𝒑 𝝎𝝎 • Accelerations are usually given by ̈𝒙𝒙 ∈ ℝ6: ̈𝒙𝒙 = 𝒂𝒂 = ̈𝒑𝒑 ̈𝝓𝝓 or ̈𝒙𝒙 = ̈𝒑𝒑 ̇𝝎𝝎 Where: • 𝒑𝒑 ∈ ℝ 3is a position vector 𝑝𝑝𝑥𝑥, 𝑝𝑝𝑦𝑦, 𝑝𝑝𝑧𝑧 𝑇𝑇 • 𝝓𝝓 ∈ ℝ 3or 𝝓𝝓 ∈ 𝑆𝑆𝑆𝑆(3) is an orientation vector 𝜙𝜙𝑥𝑥, 𝜙𝜙𝑦𝑦, 𝜙𝜙𝑧𝑧 𝑇𝑇 (which can be in many representations) Where: • ̇𝝓𝝓 ∈ ℝ 3is the time-derivative of the orientation vector • 𝝎𝝎 ∈ ℝ 3is an angular velocity 12 Different Cases with Mappings One-to-one: Many-to-one: One-to-many: One-to-none: None-to-one: Shapes Colors 13 Different Cases with Mappings (More Formally) A B A B A B A B General Injective Surjective BijectiveNOT a A B Function (not surjective) (not injective) (injective, surjective)Function A has many B B can't have many A Every B has some A A to B, perfectlyB can have many A Source: https://www.mathsisfun.com/sets/injective-surjective-bijective.html 14 Forward Kinematics (Joint  Cartesian) Forward Kinematics is the name given to the mapping from joint space to Cartesian space. In other words, if we know the position of the joints, what is the position of the end-effector? This is the easy problem. Why? Because the mappings will be: • One-to-one • Many-to-one • None-to-one Joint Space Cartesian Space 15 Inverse Kinematics (Cartesian  Joint) Inverse Kinematics is the name given to the mapping from Cartesian space to joint space. In other words, if we know the position of the end-effector, how should we place the joints? This is the HARD problem. Why? Because the mappings will be: • One-to-one • One-to-many • One-to-none Cartesian Space Joint Space And this can be nasty! Part II: Inverse Kinematics 17 Inverse Kinematics as a Mathematical Problem The forward kinematics of a robot are specified by a transformation matrix: 𝑇𝑇𝑇𝑇𝑇𝑇𝑇𝑇 𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝐵𝑻𝑻(𝜽𝜽) = 𝑟𝑟11 𝑟𝑟12 𝑟𝑟13 𝑝𝑝𝑥𝑥 𝑟𝑟21 𝑟𝑟22 𝑟𝑟23 𝑝𝑝𝑦𝑦 𝑟𝑟31 𝑟𝑟32 𝑟𝑟33 𝑝𝑝𝑧𝑧 0 0 0 1 Let’s take a Universal Robots 6R manipulator as an example. We can write a system of 12 equations with 6 unknowns1: 𝑟𝑟11 𝑟𝑟12 ⋮ 𝑝𝑝𝑧𝑧 = cos 𝜃𝜃6 sin 𝜃𝜃1 sin 𝜃𝜃5 + cos 𝜃𝜃2+ 𝜃𝜃3+ 𝜃𝜃4 cos 𝜃𝜃1 cos 𝜃𝜃5 − sin 𝜃𝜃2+ 𝜃𝜃3+ 𝜃𝜃4 cos 𝜃𝜃1 sin 𝜃𝜃6 −sin(𝜃𝜃6) ∗ (sin(𝜃𝜃1) ∗ sin(𝜃𝜃5) + cos(𝜃𝜃2+ 𝜃𝜃3+ 𝜃𝜃4)cos(𝜃𝜃1) ∗ cos(𝜃𝜃5)) − sin(𝜃𝜃2+ 𝜃𝜃3+ 𝜃𝜃4)cos(𝜃𝜃1)cos(𝜃𝜃6) ⋮ 𝑑𝑑1+ 𝑑𝑑5 sin 𝜃𝜃2+ 𝜃𝜃3 sin 𝜃𝜃4 − cos 𝜃𝜃2+ 𝜃𝜃3 cos 𝜃𝜃4 + 𝑎𝑎3sin 𝜃𝜃2+ 𝜃𝜃3 + 𝑎𝑎2sin 𝜃𝜃2 − 𝑑𝑑6sin(𝜃𝜃5)(cos(𝜃𝜃2+ 𝜃𝜃3)sin(𝜃𝜃4) + sin(𝜃𝜃2+ 𝜃𝜃3)cos(𝜃𝜃4)) Solving this for [𝜽𝜽𝟏𝟏, 𝜽𝜽𝟐𝟐, ⋯ , 𝜽𝜽𝟔𝟔] will give us the Inverse Kinematics. Only 3 of the 9 equations for the rotation are independent 1This comes from the FK, which you have calculated using DH Parameters.  We end up with 6 equations/6 unknowns. 18 Closed-form vs. Numerical Solutions Note that the equations IK are non-linear and transcendental! There are two main approaches to solving the inverse kinematics problem: • Closed-form: An analytical solution based on the forward kinematics transform equations. + Fast to compute + Exact - Does not exist for all robots - Can be complex to calculate - Needs to be calculated for each specific robot • Numerical: A numerical solution based on an approximation and iterative attempts. + Possible for all robots + The same method can be used generally for any robot - Slow to compute - Inexact We will not go into this today. 19 IK of 2R Planar Manipulator Objective: Obtain 𝑞𝑞1, 𝑞𝑞2 Given: • End-effector position: 𝑥𝑥, 𝑦𝑦 • Length of links: 𝐿𝐿1and 𝐿𝐿2 Exercise: 10-15 minutes Hint: Use the rule of cosines: 𝑎𝑎2= 𝑏𝑏2+ 𝑐𝑐2− 2𝑏𝑏𝑐𝑐 cos 𝐴𝐴 𝑏𝑏2= 𝑎𝑎2+ 𝑐𝑐2− 2𝑎𝑎𝑐𝑐 cos 𝐵𝐵 𝑐𝑐2= 𝑎𝑎2+ 𝑏𝑏2− 2𝑎𝑎𝑏𝑏 cos 𝐶𝐶 𝐿𝐿1 (𝑥𝑥, 𝑦𝑦) 𝑞𝑞1 𝐿𝐿2 𝑞𝑞2 𝐶𝐶 𝐴𝐴 𝐵𝐵 𝑎𝑎 𝑏𝑏𝑐𝑐 20 IK of 2R Planar Manipulator: Solution for 𝒒𝒒𝟐𝟐 𝑐𝑐2= 𝑎𝑎2+ 𝑏𝑏2− 2𝑎𝑎𝑏𝑏 cos 𝐶𝐶 cos 𝐶𝐶 = 𝑎𝑎2+ 𝑏𝑏2− 𝑐𝑐2 2𝑎𝑎𝑏𝑏 cos 𝜋𝜋 − 𝑞𝑞2 = 𝐿𝐿1 2+ 𝐿𝐿2 2− 𝑥𝑥2+ 𝑦𝑦2 2 2𝐿𝐿1𝐿𝐿2 cos 𝑞𝑞2 = − 𝐿𝐿1 2+ 𝐿𝐿2 2− 𝑥𝑥2− 𝑦𝑦2 2𝐿𝐿1𝐿𝐿2 𝐿𝐿1 (𝑥𝑥, 𝑦𝑦) 𝑞𝑞1 𝐿𝐿2 𝑞𝑞2 𝐶𝐶 𝐴𝐴 𝐵𝐵 𝑎𝑎 𝑏𝑏𝑐𝑐 𝑞𝑞2= ± acos 𝑥𝑥2+ 𝑦𝑦2− 𝐿𝐿1 2− 𝐿𝐿2 2 2𝐿𝐿1𝐿𝐿2 21 IK of 2R Planar Manipulator: Solution for 𝒒𝒒𝟏𝟏 𝑏𝑏2= 𝑎𝑎2+ 𝑐𝑐2− 2𝑎𝑎𝑐𝑐 cos 𝐵𝐵 𝐵𝐵 = ± acos 𝐿𝐿1 2+ 𝑥𝑥2+ 𝑦𝑦2− 𝐿𝐿2 2 2𝐿𝐿1 𝑥𝑥2+ 𝑦𝑦2 𝐿𝐿1 (𝑥𝑥, 𝑦𝑦) 𝑞𝑞1 𝐿𝐿2 𝑞𝑞2 𝑞𝑞1= 𝜑𝜑 − 𝐵𝐵 𝝋𝝋 𝐶𝐶 𝐴𝐴 𝐵𝐵 𝑎𝑎 𝑏𝑏𝑐𝑐 𝜑𝜑 = atan2 𝑦𝑦, 𝑥𝑥 𝑞𝑞1= atan2 𝑦𝑦, 𝑥𝑥 ∓ acos 𝐿𝐿1 2+ 𝑥𝑥2+ 𝑦𝑦2− 𝐿𝐿2 2 2𝐿𝐿1 𝑥𝑥2+ 𝑦𝑦2 Using law of cosines: 22 IK of 2R Planar Manipulator: Alternate Solution for 𝒒𝒒𝟏𝟏 𝑎𝑎 sin 𝐴𝐴 = 𝑏𝑏 sin 𝐵𝐵 = 𝑐𝑐 sin 𝐶𝐶 𝐵𝐵 = asin 𝑏𝑏 sin 𝐶𝐶 𝑐𝑐 𝐵𝐵 = asin 𝐿𝐿2sin(𝜋𝜋 − 𝑞𝑞2) 𝑐𝑐 = asin 𝐿𝐿2sin(𝑞𝑞2) 𝑐𝑐 𝐿𝐿1 (𝑥𝑥, 𝑦𝑦) 𝑞𝑞1 𝐿𝐿2 𝑞𝑞2 𝑞𝑞1= 𝜑𝜑 − 𝐵𝐵 𝝋𝝋 𝐶𝐶 𝐴𝐴 𝐵𝐵 𝑎𝑎 𝑏𝑏𝑐𝑐 𝜑𝜑 = atan2 𝑦𝑦, 𝑥𝑥 𝑞𝑞1= atan2 𝑦𝑦, 𝑥𝑥 ∓ asin 𝐿𝐿2sin(𝑞𝑞2) 𝑐𝑐 Using law of sines (alternate solution): 23 Example: IK of Universal Robots 6R Manipulator We start with the frame assignment according to the modified DH parameter convention. Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University 24 Example UR IK: Finding 𝜽𝜽𝟏𝟏(I) Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University First, notice that we can find frame 5 from frame 6: We will use this to find 𝜃𝜃1. 25 Example UR IK: Finding 𝜽𝜽𝟏𝟏(II) Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University We break down 𝜃𝜃1into two angles: We determine 𝜙𝜙1by looking at the triangle formed by 0𝑃𝑃5𝑥𝑥, 0𝑃𝑃5𝑦𝑦and 0𝑃𝑃5𝑥𝑥𝑦𝑦: We determine 𝜙𝜙2by looking at the triangle formed by 𝑑𝑑4, 0𝑃𝑃5𝑥𝑥 and 0𝑃𝑃5𝑥𝑥𝑦𝑦: Shoulder left/right 26 Example UR IK: Finding 𝜽𝜽𝟓𝟓 Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University Notice that 1𝑃𝑃6𝑦𝑦 only depends on 𝜃𝜃5. Notice also that we can write: But we can also look at is as a rotation around the 𝑧𝑧-axis of frame 0: Wrist up/down 27 Refresher: Spherical Coordinates Conversion to Cartesian coordinates: 28 Example UR IK: Finding 𝜽𝜽𝟔𝟔(I) Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University Notice that 6�𝑌𝑌1is always parallel to 6̂𝑍𝑍2,3,4 This implies it only depends on 𝜃𝜃5and 𝜃𝜃6. We can visualize 6�𝑌𝑌1in spherical coordinates and then re-write this in Cartesian coordinates: We can express 6�𝑌𝑌1in terms of a rotation of frame 0 around the 𝑧𝑧-axis (like we did for 𝜃𝜃5): 29 Example UR IK: Finding 𝜽𝜽𝟔𝟔(II) Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University Combining the first two entries of the two expressions from the previous slide: If the denominator is 0 or both numerators are 0, then 𝐬𝐬𝐬𝐬𝐬𝐬 𝜽𝜽𝟓𝟓= 𝟎𝟎, and the solution is undefined. Question: What does it mean physically on the robot? Hint: Look at the figure on the previous slide. Answer: Axes 2, 3, 4 and 6 are aligned, making rotation around 6 redundant. 30 31 Example UR IK: Finding 𝜽𝜽𝟐𝟐, 𝜽𝜽𝟑𝟑and 𝜽𝜽𝟒𝟒(I) Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University Notice that the three joints that are left consitute a 3R planar manipulator. …and the position of a 3R planar manipulator can be solved for like a 2R, since the last joint only affects the orientation. 32 Example UR IK: Finding 𝜽𝜽𝟑𝟑and 𝜽𝜽𝟐𝟐 Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University This follows the same logic as the 2R planar manipulator: 33 Example UR IK: Finding 𝜽𝜽𝟒𝟒 Based on ”Kinematics of a UR5” by Rasmus Skovgaard Andersen, Aalborg University From the definition of 𝜃𝜃 as a DH parameter: “𝜽𝜽𝒊𝒊 – The angle from �𝑿𝑿𝑖𝑖−1to �𝑿𝑿𝑖𝑖 measured about �𝒁𝒁𝑖𝑖” From the definition of a rotation matrix: 𝐵𝐵 𝐴𝐴𝑹𝑹 = 𝐴𝐴�𝑿𝑿𝐵𝐵 𝐴𝐴�𝒀𝒀𝐵𝐵 𝐴𝐴�𝒁𝒁𝐵𝐵 We then can then just look at the first column of the rotation of 4 3𝑻𝑻 and write: Part III: Practical Considerations 35 Workspace in relation to Inverse Kinematics The workspace is the volume of space that the end-effector can reach. We can distinguish between: • Reachable workspace: can be reached with at least one orientation. • Dexterous workspace: can be reached with any orientation. Example: For a 2R planar manipulator with equal-length links, 𝐿𝐿1= 𝐿𝐿2= 𝐿𝐿: Reachable (≤2𝐿𝐿) Dexterous (center) 36 DOF and Number of Solutions The number of DOF of the robot will greatly affect the number of IK solutions. For a 3D Cartesian space with 3-DOF position + 3-DOF orientation and an 𝑛𝑛-DOF robot: • 𝑛𝑛 < 6: Will often run into the problem of not having a solution • 𝑛𝑛 = 6: Will (in theory) be the minimum to cover the entire space:  Some points will have a single IK solution  Some points will have multiple solutions  (In practice, some points will present singularities) • 𝑛𝑛 > 7: Will be redundant (always multiple solutions).  We will see this in upcoming lectures 37 Notion of Subspace for 𝒏𝒏 < 𝟔𝟔DOF A 6-DOF robot operates in general in 3D space, but can only move to points in its reachable workspace. For 𝑛𝑛 < 6 DOF, we can define a portion of space that it operates in, called a subspace.  Analyzing the subspace can help us determine whether the robot fits our needs. Question: What is the subspace of A 2R planar robot? Subspace Workspace (reachable) Workspace (dexterous) 38 Example – Multiple IK Solutions: UR (6-DOF) 39 Multiple IK Solutions: 7-DOF 40 Choice of IK Solutions Different tasks will dictate a different choice of IK solution: 41 Repeatability & Accuracy (in relation to FK/IK) Question: Considering what you know about FK and IK, which mode of control is (potentially) preferable if reaching a point precisely is required? Why? (Discuss with your neighbors – 5 minutes). Joint-space control: • Only depends on the joint controllers/the ability of the joint encoders to measure joint position.  Repeatability: measures how precisely a manipulator can return to a known set of joint angles. Cartesian-space control: • Depends on the same as joint-space control + • Depends on how precisely the DH parameters are known. This is subject to manufacturing tolerances.  Accuracy: measures of how precisly a manipulator can reach a point computed through IK. • Calibration of the parameters can be used to improve accuracy. Repeatability ≥Accuracy 42 Recap: What have we discussed today • A robot can be controlled in joint space or Cartesian space. The choice of either will imply solving a problem of:  Forward Kinematics: given joint angles, determine the position of the end-effector.  Inverse Kinematics: given a position of the end-effector, determine (all sets of) the corresponding joint angles. • Inverse Kinematics is a complex non-linear problem, which can be solved:  Analytically (closed-form): Only possible for some robots, hard to derive.  Numerically (iterative): A numerical approximation to the solution. • The workspace of a robot is closely related to the existence and number of IK solutions:  Reachable: the robot can reach the point with at least one orientation  Dexterous: the robot can reach the point with any orientation. • The measures of reapeatability and accuracy are closely related to the FK and IK problems. Inverse Kinematics is a much more complex problem than Forward Kinematics, but is required to control a robot in task space. The structure and number of DOF of the robot will have a huge impact on the number and type of IK solutions available. Take home message: 43 Thank you for today. Iñigo Iturrate inju@mmmi.sdu.dk Ø27-604-3","libVersion":"0.2.4","langs":""}