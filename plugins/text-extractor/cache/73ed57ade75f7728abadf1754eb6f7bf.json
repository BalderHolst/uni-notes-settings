{"path":"Lessons/Semester 2/Kinematik/Lecture 11 - Jacobian Singularities Numerical IK and Trajectory Generation.pdf","text":"Lecture 11: More about Jacobians & Trajectory Generation Iñigo Iturrate Assistant Professor SDU Robotics, The Maersk McKinney Moller Institute, University of Southern Denmark inju@mmmi.sdu.dk Ø27-604-3 2 Recap (Exercise, 10 min.) Discuss with your neighbors (5 min.): In the context of robotics: 1. Why do we use the Jacobian? 2. How is the matrix structured? 3. What can we say about its individual elements in relation to how the robot moves in joint/Cartesian space? Then share with me what you have discussed (5 min.). 3 What did we derive last time? We wanted to find: ̇𝒙𝒙 = ? ⋯ ? ⋮ ⋱ ⋮ ? ⋯ ? ̇𝒒𝒒 Insert joint velocity vector here Do some sorcery here Get end-effector velocity here (This sorcery is called the Jacobian Matrix) ̇𝒙𝒙 = 𝑱𝑱(𝒒𝒒) ̇𝒒𝒒 4 The Two Jacobians in Robotics Remember that we can describe Cartesian-space velocity in (at least) two ways, depending on how we describe rotational velocity: • Using angular velocity: ̇𝒙𝒙 = ̇𝒑𝒑 𝝎𝝎 • Using the derivative of Euler angles: ̇𝒙𝒙 = 𝒗𝒗 = ̇𝒑𝒑 ̇𝝓𝝓 We can split the Jacobian in two: 𝑱𝑱 = 𝑱𝑱𝑃𝑃 𝑱𝑱𝑂𝑂 𝑱𝑱𝑂𝑂 based on angular velocity 𝑱𝑱𝑂𝑂 based on derivative of Euler angles Geometric Jacobian Analytical Jacobian Jacobian for Orientation Jacobian for Position (This stays the same) We will only study this 5 Building a Geometric Jacobian We first split the matrix into 3 × 1 column vectors, 𝑱𝑱𝑃𝑃𝑖𝑖 and 𝑱𝑱𝑂𝑂𝑖𝑖, where each element 𝑖𝑖 represents the contribution of a single joint 𝑞𝑞𝑖𝑖 to either the position or orientation: 𝑱𝑱 = 𝑱𝑱𝑃𝑃𝑃 𝑱𝑱𝑃𝑃𝑃𝑃 ⋯ 𝑱𝑱𝑂𝑂𝑃 𝑱𝑱𝑂𝑂𝑃𝑃 𝑱𝑱𝑃𝑃𝑖𝑖 = 𝐽𝐽𝑃𝑃𝑖𝑖,𝑥𝑥 𝐽𝐽𝑃𝑃𝑖𝑖,𝑦𝑦 𝐽𝐽𝑃𝑃𝑖𝑖,𝑧𝑧 𝑱𝑱𝑂𝑂𝑖𝑖 = 𝐽𝐽𝑂𝑂𝑖𝑖,𝜔𝜔𝑥𝑥 𝐽𝐽𝑂𝑂𝑖𝑖,𝜔𝜔𝑦𝑦 𝐽𝐽𝑂𝑂𝑖𝑖,𝜔𝜔𝑧𝑧 Then, for each joint 𝑖𝑖: • Revolute: 𝑱𝑱𝑃𝑃𝑖𝑖 = 0̂𝑍𝑍𝑖𝑖 × 0𝑃𝑃𝑒𝑒 − 0𝑃𝑃𝑖𝑖 𝑱𝑱𝑂𝑂𝑖𝑖 = 0̂𝑍𝑍𝑖𝑖 • Prismatic: 𝑱𝑱𝑃𝑃𝑖𝑖 = 0̂𝑍𝑍𝑖𝑖 𝑱𝑱𝑂𝑂𝑖𝑖 = 0 0̂𝑍𝑍𝑖𝑖 = 𝑖𝑖 0𝑅𝑅 0 0 1 0𝑃𝑃𝑒𝑒 is the position of the end-effector 0𝑃𝑃𝑖𝑖 is the position of the origin of frame {i} 6 What are we doing today? 1. CAD Modelling in Autodesk Inventor – Guest Lecture by Aljaz Kramberger 2. CAD Assemblies in Autodesk Inventor – Guest Lecture by Aljaz Kramberger 3. Introduction to Robotics & Recap of Linear Algebra and Mathematical Notation 4. Translations & Rotation Matrices 5. Other Representations for Orientation 6. Transformation Matrices 7. DH Parameters & Forward Kinematics 8. Inverse Kinematics 9. Kinematic Simulation 10. Velocity Kinematics & the Jacobian Matrix 11. More about the Jacobian & Trajectory Generation (Today) 12. Manipulability, More on the Robotic Systems Toolbox 7 Topics for Today Part I: The Jacobian Matrix & Singularities • Forward & Inverse Velocity Kinematics • Using the Jacobian for Numerical IK (conceptually) • Singularities as seen:  From the Jacobian  From Analytical (closed-form) solutions to IK Part II: Trajectory Generation • Point-to-point (PTP) movements  In Joint space and Cartesian space (position only!) • Trapezoidal velocity profiles • Quadratic, Cubic and Higher-order Polynomials • Chaining multiple PTP movements Part I: Using the Jacobian Matrix & Singularities 9 Forward and Inverse Velocity Kinematics ̇𝒒𝒒 = 𝑱𝑱−𝑃(𝒒𝒒) ̇𝒙𝒙̇𝒙𝒙 = 𝑱𝑱(𝒒𝒒) ̇𝒒𝒒 Given the forward velocity kinematics equation, and assuming that the inverse of the Jacobian exists, we can obtain the inverse velocity kinematics equation: This is a very important result in robotics. The forward/inverse veocity kinematics equations are the basis of numerical IK methods. 10 The Problem with the Jacobian Inverse Consider the inverse velocity kinematics equation: ̇𝒒𝒒 = 𝑱𝑱−𝑃(𝒒𝒒) ̇𝒙𝒙 Do you see any potential issues here? So… what happens then? Not all matrices have an inverse… This does not always exist! 11 Singularities: Non-existence of inverse When does the inverse of a matrix not exist? Due to a non-square matrix: • Example: a redundant robot (e.g. 7-DOF in a 3D space) ̇𝒙𝒙 = 𝑱𝑱 𝒒𝒒 ̇𝒒𝒒 ̇𝒑𝒑 𝝎𝝎 = 𝑱𝑱𝑃𝑃𝑃 𝑱𝑱𝑃𝑃𝑃 ⋯ 𝑱𝑱𝑂𝑂𝑃 𝑱𝑱𝑂𝑂𝑃 𝑞𝑞𝑃 ⋮ 𝑞𝑞𝑃 Due to a rank-defficient square matrix (6 × 1) (6 × 7) (7 × 1) 12 Rank & Determinant of the Jacobian Remember: The rank of a matrix is the number of linearly independent columns. Full rank: The rank of the matrix is the maximum possible for a matrix of that size. Rank-defficient/singular: The matrix is not full rank. • The robot cannot move in one or more directions. • At a singular configuration, the determinant of the Jacobian will be zero (and close to zero when close to a singularity). Discuss: Think about this last statement in connection with: • The definition of the inverse of a matrix: 𝑱𝑱−𝟏𝟏 = 𝑃 det 𝑱𝑱 adj 𝑱𝑱 • The inverse velocity kinematics equation: ̇𝒒𝒒 = 𝑱𝑱−𝑃(𝒒𝒒) ̇𝒙𝒙 What can we conclude about the joint velocities of a robot when moving close to a singularity? 13 Singularities – Example: UR Robot 14 Singularities of UR: Relating them to IK Solutions Wrist singularity • Axes of joints 4 and 6 parallel • 𝜃𝜃5= 0°, 𝜃𝜃5= ±180° or 𝜃𝜃5= ±360° Elbow singularity • Axes of joints 2, 3 and 4 coplanar • 𝜃𝜃3= 0° Shoulder singularity • Intersection of axes of joints 5 and 6 coplanar with axes of joints 1 and 2. 15 Practical Applications of the Jacobian The Jacobian is used everywhere in robotics: • Numerical Inverse Kinematics  We will look at this (conceptually) now • Manipulability Metrics (checking how ”free” the robot is to move/apply a force in each direction)  We will study this next lecture • Robot Control  Position Control  Velocity Control  Force Control You will study this in other courses 16 Numerical Inverse Kinematics: Conceptually We are here We want to move here 𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠, 𝒒𝒒𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑡𝑡𝑒𝑒𝑠𝑠 1. We know: 𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠, 𝒒𝒒𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑡𝑡𝑒𝑒𝑠𝑠 2. We want to find: 𝒒𝒒𝑠𝑠𝑠𝑠𝑠𝑠𝑡𝑡𝑒𝑒𝑠𝑠 3. We can calculate: ∆𝒙𝒙 = 𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑡𝑡𝑒𝑒𝑠𝑠 − 𝒙𝒙𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 4. We take ∆𝒙𝒙 and split it in smaller segments: 5. We make a very small step in the direction of ∆𝒙𝒙: 𝒅𝒅𝒒𝒒 𝑡𝑡 = 𝑱𝑱 −𝑃 𝒒𝒒 𝒅𝒅𝒙𝒙 𝑡𝑡 𝒒𝒒 𝑡𝑡 + 𝑑𝑑𝑡𝑡 = 𝒒𝒒 𝑡𝑡 + 𝒅𝒅𝒒𝒒 𝑡𝑡 𝑑𝑑𝑡𝑡 6. We re-calculate: 𝑱𝑱 𝒒𝒒 𝑡𝑡 + 𝑑𝑑𝑡𝑡 , 𝒙𝒙(𝑡𝑡 + 𝑑𝑑𝑡𝑡) (from FK) 7. We check if we are close enough to our target: • If yes: stop • If not: repeat 3-7. ∆𝒙𝒙 𝒒𝒒𝑠𝑠𝑠𝑠𝑠𝑠𝑡𝑡𝑒𝑒𝑠𝑠? ? ? What happens if, in step 5, the step size is not small enough? 17 What if the Jacobian is NOT square? What do we do with robots whose Jacobians are not square, e.g. redundant robots? • Jacobian Transpose: ̇𝒒𝒒 = 𝛼𝛼𝑱𝑱 𝑇𝑇 ̇𝒙𝒙 (for some small 𝛼𝛼 > 0)  This can behave ”close enough” to the inverse assuming a small enough 𝛼𝛼. • Jacobian (Moore-Penrose) Pseudoinverse: ̇𝒒𝒒 = 𝑱𝑱 † ̇𝒙𝒙 (where † is the pseudoinverse)  This is a generalization of the concept of inverse for non-square matrices. …which, in MATLAB, can be calculated using pinv(): https://se.mathworks.com/help/matlab/ref/pinv.html?s_tid=doc_ta Part II: Trajectory Generation (for Linear Paths) 19 Offline vs. Online Robot Trajectory Control Internally, a robot has a control computer that is updating the robot parameters and sending commands to the motors at a fixed updated rate/control cycle. There are typically two ways for a user to control a robot: • Online control: Commands are sent to the robot at its update rate/control frequency.  Example: UR e-series robots run at 500 Hz, so a new target point would have to be sent to the robot every 2 ms.  This means that a path has to be discretized/sampled to fit the robot’s control cycle. • Offline control: Specify a start and end point, a type of motion, and constraints on time/velocity.  Example: Move in a straight line in Cartesian space from 𝑃𝑃𝑃= 0.3, −0.2, 0.4, 𝜋𝜋 2 , 0,0 to 𝑃𝑃2= 0.5, 0.1, 0.2, 𝜋𝜋 2 , 0,0  The robot internally figures out how to translate this into an online control problem. 20 Offline vs. Online Robot Trajectory Control ”Linear Cartesian Move” or ”Linear Joint Move” Offline Control Online Control Desired Path Robot Control Computer (updates at certain control frequency) Move Type: Parameters: Target Point Start Point Speed Time Discretized Path: Send commands continuously Send command once 21 Getting from A to B: Multiple Paths This path is not linear. We are not considering this right now This is a linear path. This is what we are discussing. Linear paths will always take the shortest distance in that particular space. 22 Movement in Joint or Cartesian Space We can define trajectories for a robot in either Joint or Cartesian space. • Joint space has the advantage that we do not have to consider singularities. • Cartesian space has the advantage that it is easier to relate to the task and to how we think. Linear Movements: Cartesian ≠ Joint Space! Linear movement in Cartesian space  curved movement in Joint Space! Let us see it on the robot… 23 Getting from A to B: Multiple Velocity Profiles This is what we will be discussing. All of these paths reach the target point at the same time: …but they do so with different velocity profiles. 24 Different Velocity Profiles Source: Yoon et al. “Trapezoidal Motion Profile to Suppress Residual Vibration of Flexible Object Moved by Robot”, Electronics, MDPI, 2019, https://www.mdpi.com/2079-9292/8/1/30/htm 25 Trapezoidal Velocity Profiles Source: Yoon et al. “Trapezoidal Motion Profile to Suppress Residual Vibration of Flexible Object Moved by Robot”, Electronics, MDPI, 2019, https://www.mdpi.com/2079-9292/8/1/30/htm Specify either: • Max. velocity and acceleration: 𝑡𝑡𝑠𝑠 = 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 • Max. velocity and time: 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 = 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡𝑠𝑠 • Max. acceleration and time: 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 = 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠 Then calculate: 𝑡𝑡𝑓𝑓 = ∆𝑥𝑥 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 + 𝑡𝑡𝑠𝑠 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 = 𝑡𝑡𝑓𝑓 − 2𝑡𝑡𝑠𝑠 26 Exercise (10 min.) Given: 𝑝𝑝𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠, 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥, 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥, 𝑡𝑡𝑠𝑠, 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 1. Write an equation to calculate the velocity at any given time, 𝑡𝑡 for a trapezoidal velocity profile. 2. Do the same for position. (Hint: They should be piecewise equations) 𝑣𝑣 𝑡𝑡 = � 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡, 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥, 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 , 𝑡𝑡 < 𝑡𝑡𝑠𝑠 𝑡𝑡𝑠𝑠 ≤𝑡𝑡 < 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑡𝑡 ≥𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑝𝑝 𝑡𝑡 = 1 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡2, 1 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 , 1 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 2 , 𝑡𝑡 < 𝑡𝑡𝑠𝑠 𝑡𝑡𝑠𝑠 ≤𝑡𝑡 < 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑡𝑡 ≥𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 27 1 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 − 𝑡𝑡𝑠𝑠 + 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑃 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 + 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 2 𝑃 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 2 Simplification of 𝑝𝑝 𝑡𝑡 for 𝑡𝑡 ≥𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 𝑃 2 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑠𝑠2+ 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 + 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 − 𝑣𝑣𝑚𝑚𝑠𝑠𝑥𝑥𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 − 𝑎𝑎𝑚𝑚𝑠𝑠𝑥𝑥 𝑡𝑡 − 𝑡𝑡𝑠𝑠 + 𝑡𝑡𝑐𝑐𝑐𝑐𝑃𝑃𝑠𝑠𝑠𝑠 2 28 Trapezoidal Velocity Profiles: Derivatives Jerk is the derivative of the acceleration, i.e., how fast the acceleration changes over time. Why do we care about jerk? • High jerk causes wear in gears, motors and mechanical components. • In a car accident, jerk is what causes damage to your neck from whiplash. For a trapezoidal velocity profile, jerk is (theoretically) infinite!There is a problem… 29 Cubic Polynomial We can also specify a trajectory as a cubic polynomial: 𝑞𝑞 𝑡𝑡 = 𝑎𝑎𝑡𝑡3+ 𝑏𝑏𝑡𝑡2+ 𝑐𝑐𝑡𝑡 + 𝑑𝑑 ̇𝑞𝑞 𝑡𝑡 = 3𝑎𝑎𝑡𝑡2+ 2𝑏𝑏𝑡𝑡 + 𝑐𝑐 ̈𝑞𝑞 𝑡𝑡 = 6𝑎𝑎𝑡𝑡 + 2𝑏𝑏 ⃛𝑞𝑞 𝑡𝑡 = 6𝑎𝑎 This will result in smoother motion than a trapezoidal velocity profile. 30 Boundary Constraints To calculate the parameters of the cubic polynomial, we set up constraints: • On the starting point: • On the end point: Then we just solve for the parameters as a system of equations. 𝑞𝑞 0 = 𝑞𝑞𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = 𝑑𝑑 ̇𝑞𝑞 0 = ̇𝑞𝑞𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = 𝑐𝑐 𝑞𝑞 𝑇𝑇 = 𝑞𝑞𝑒𝑒𝑃𝑃𝑒𝑒 = 𝑎𝑎𝑇𝑇3+ 𝑏𝑏𝑇𝑇2+ 𝑐𝑐𝑇𝑇 + 𝑑𝑑 ̇𝑞𝑞 𝑇𝑇 = ̇𝑞𝑞𝑒𝑒𝑃𝑃𝑒𝑒 = 3𝑎𝑎𝑇𝑇2+ 2𝑏𝑏𝑇𝑇 + 𝑐𝑐 4 equations, 4 unknowns 31 Higher Order Polynomials We can do the same for higher-order polynomials. For example, a fifth-order polynomial allows us to specify boundary constraints on the acceleration: 𝑞𝑞 𝑡𝑡 = 𝑎𝑎𝑡𝑡5+ 𝑏𝑏𝑡𝑡4+ 𝑐𝑐𝑡𝑡3+ 𝑑𝑑𝑡𝑡2+ 𝑒𝑒𝑡𝑡 + 𝑓𝑓 ̇𝑞𝑞 𝑡𝑡 = 5𝑎𝑎𝑡𝑡4+ 4𝑏𝑏𝑡𝑡3+ 3𝑐𝑐𝑡𝑡2+ 2𝑑𝑑𝑡𝑡 + 𝑒𝑒 ̈𝑞𝑞 𝑡𝑡 = 20𝑎𝑎𝑡𝑡3+ 12𝑏𝑏𝑡𝑡2+ 6𝑐𝑐𝑡𝑡 + 2𝑑𝑑 𝑞𝑞 0 = 𝑞𝑞𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = 𝑓𝑓 ̇𝑞𝑞 0 = ̇𝑞𝑞𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 =e ̈𝑞𝑞 0 = ̈𝑞𝑞𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠𝑠 = 2𝑑𝑑 𝑞𝑞 𝑇𝑇 = 𝑞𝑞𝑒𝑒𝑃𝑃𝑒𝑒 = 𝑎𝑎𝑇𝑇5+ 𝑏𝑏𝑇𝑇4+ 𝑐𝑐𝑇𝑇3+ 𝑑𝑑𝑇𝑇2+ 𝑒𝑒𝑇𝑇 + 𝑓𝑓 ̇𝑞𝑞 𝑇𝑇 = ̇𝑞𝑞𝑒𝑒𝑃𝑃𝑒𝑒 = 5𝑎𝑎𝑇𝑇4+ 4𝑏𝑏𝑇𝑇3+ 3𝑐𝑐𝑇𝑇2+ 2𝑑𝑑𝑇𝑇+ 𝑒𝑒 ̈𝑞𝑞 𝑇𝑇 = ̈𝑞𝑞𝑒𝑒𝑃𝑃𝑒𝑒 = 20𝑎𝑎𝑇𝑇3+ 12𝑏𝑏𝑇𝑇2+ 6𝑐𝑐𝑇𝑇+ 2𝑑𝑑 32 Trajectories for Multiple Joints/Dimensions The previous examples consider only one joint/Cartesian space dimension independently at a time. Generalizing to multiple dimensions is simply a matter of making all parameters vectors: 𝒒𝒒 𝑡𝑡 = 𝒂𝒂𝑡𝑡3+ 𝒃𝒃𝑡𝑡2+ 𝒄𝒄𝑡𝑡 + 𝒅𝒅 𝑞𝑞𝑃 𝑡𝑡 ⋮ 𝑞𝑞𝑃𝑃 𝑡𝑡 = 𝑎𝑎𝑃 ⋮ 𝑎𝑎𝑃𝑃 𝑡𝑡3+ 𝑏𝑏𝑃 ⋮ 𝑏𝑏𝑃𝑃 𝑡𝑡2+ 𝑐𝑐 ⋮ 𝑐𝑐𝑃𝑃 𝑡𝑡 + 𝑑𝑑 ⋮ 𝑑𝑑𝑃𝑃 Question: The above is true for a complete joint-space position. Will it work for a full Cartesian-space pose (position + orientation)? Why or why not? If not, which part is it true for? Discuss (5 minutes) 33 Linear Trajectories through Multiple Points 𝑃𝑃𝑃 𝑃𝑃2 𝑃𝑃3 𝑃𝑃𝑃 𝑃𝑃2 𝑃𝑃3 Continuous motion through middle pointStopping at middle point Question: with the tools so far, how do you obtain the following behavior? (Discuss with your neighbors, 5 min., then share with the class) 34 Linear Trajectories through Multiple Points Two trapezoidal velocity profiles in a row: • One from 𝑃𝑃𝑃to 𝑃𝑃2 • Another from 𝑃𝑃2to 𝑃𝑃3 𝑃𝑃𝑃 𝑃𝑃2 𝑃𝑃3 𝑃𝑃𝑃 𝑃𝑃2 𝑃𝑃3 Two cubic polynomials: 𝑞𝑞𝑃 0 = 𝑃𝑃𝑃 ̇𝑞𝑞𝑃 0 = 0 𝑞𝑞𝑃 𝑇𝑇𝑒𝑒𝑃𝑃𝑒𝑒,𝑃 = 𝑞𝑞2 0 = 𝑃𝑃2 ̇𝑞𝑞𝑃 𝑇𝑇𝑒𝑒𝑃𝑃𝑒𝑒,𝑃 = ̇𝑞𝑞2 0 = 𝑣𝑣 𝑞𝑞𝑃 𝑡𝑡 = 𝑎𝑎𝑃𝑡𝑡3+ 𝑏𝑏𝑃𝑡𝑡2+ 𝑐𝑐𝑃𝑡𝑡 + 𝑑𝑑𝑃 ̇𝑞𝑞𝑃 𝑡𝑡 = 3𝑎𝑎𝑃𝑡𝑡2+ 2𝑏𝑏𝑃𝑡𝑡 + 𝑐𝑐𝑃 ̈𝑞𝑞𝑃 𝑡𝑡 = 6𝑎𝑎𝑃𝑡𝑡 + 2𝑏𝑏𝑃 𝑞𝑞2 𝑡𝑡 = 𝑎𝑎2𝑡𝑡3+ 𝑏𝑏2𝑡𝑡2+ 𝑐𝑐2𝑡𝑡 + 𝑑𝑑2 ̇𝑞𝑞2 𝑡𝑡 = 3𝑎𝑎2𝑡𝑡2+ 2𝑏𝑏2𝑡𝑡 + 𝑐𝑐2 ̈𝑞𝑞2 𝑡𝑡 = 6𝑎𝑎2𝑡𝑡 + 2𝑏𝑏2 𝑞𝑞2 𝑇𝑇𝑒𝑒𝑃𝑃𝑒𝑒,2 = 𝑃𝑃3 ̇𝑞𝑞2 𝑇𝑇𝑒𝑒𝑃𝑃𝑒𝑒,2 = 0 with shared middle constraint: 35 What about Cartesian-space Orientation? The methods introduced so far assume that each dimension is independent. When describing orientation, all components are interdependent. Orientations need to be treated separately using, e.g. quaternions. This is much more complicated and beyond this course. 36 Moving in Cartesian Space: IK Solutions When moving in Cartesian space, we also need to consider the existence of multiple IK solutions. Within the same trajectory, we will usually want to pick the closest solution to the current configuration. With redundant robots (and our own arm), we can change solutions for the elbow while moving. 37 Recap: What have we discussed today • The inverse velocity kinematics equation has many important applications in robotics. • The inverse of the Jacobian cannot be calculated if the robot is in a singular configuration.  In this case, the robot cannot move in certain directions.  Joint velocities close to singularities will be very large. • Linear movements in Cartesian and Joint space will always follow the shortest distance (in that space!) • We can design different linear movements by changing the velocity profile:  Trapezoidal  Polynomial (3rd or 5th order) • When moving in Cartesian space, we must always consider the choice of IK solution. 1. Moving close to singularities (where the Jacobian cannot be inverted) results in high joint velocities, which has important practical consequences. 2. For linear motions, different velocity profiles (e.g. trapezoidal or polynomial) will result in different features and degrees of smoothness. The choice of profile will influence our ability to set boundary conditions. Take home message(s): 38 Thank you for today. Iñigo Iturrate inju@mmmi.sdu.dk Ø27-604-3","libVersion":"0.2.4","langs":""}