{"path":"Lessons/Semester 2/microcontrolers/Lesson 3.pdf","text":"Lesson 3 1 Multiplexer (MUX) 2 Multiplexer (MUX), or Selector • Selects one of the N inputs to connect it to the output • based on the value of a log2N-bit control input called select • Example: 2-to-1 MUX S Y 0 D0 1 D1 Multiplexer (MUX), or Selector (II) • Selects one of the N inputs to connect it to the output • based on the value of a log2N-bit control input called select • Example: 2-to-1 MUX • S=1 • A AND 0 = 0 • B AND 1 = B • B OR 0 = B A B S C ba S=1 0 B B S=0 A 0 A • S=0 • A AND 1 = A • B AND 0 = 0 • A OR 0 = A Multiplexer (MUX), or Selector (III) • The output C is always connected to either the input A or the input B • Output value depends on the value of the select line S 5 A B S C S C 0 A 1 B Aside: Logic Using Multiplexers • Multiplexers can be used as lookup tables to perform logic functions 7 Aside: Logic Using Multiplexers (II) • Multiplexers can be used as lookup tables to perform logic functions 8 Aside: Logic Using Multiplexers (III) • Multiplexers can be used as lookup tables to perform logic functions 9 3X1 Mux Aside: Logic Using Multiplexers (III) • How to implement the same logic by 2X1 MUX? 10 2X1 Mux 00 01 10 11 Decoder 11 Decoder • “Input pattern detector” • n inputs and 2n outputs • Exactly one of the outputs is 1 and all the rest are 0s • The one output that is logically 1 is the output corresponding to the input pattern that the logic circuit is expected to detect • Example: 2-to-4 decoder 12 Decoder (I) • n inputs and 2n outputs • Exactly one of the outputs is 1 and all the rest are 0s • The one output that is logically 1 is the output corresponding to the input pattern that the logic circuit is expected to detect A 1 if A,B is 00 B 1 if A,B is 01 1 if A,B is 10 1 if A,B is 11 A = 1 0 B = 0 0 1 0 Decoder (II) • The decoder is useful in determining how to interpret a bit pattern 14 A = 1 0 B = 0 0 1 0 ❑ It could be the address of a row in DRAM, that the processor intends to read from ❑ It could be an instruction in the program and the processor has to decide what action to do! (based on instruction opcode) Full Adder 15 Full Adder (I) • Binary addition • Similar to decimal addition • From right to left • One column at a time • One sum and one carry bit • Truth table of binary addition on one column of bits within two n-bit operands 16 𝒂𝒏−𝟏𝒂𝒏−𝟐 … 𝒂𝟏𝒂𝟎 𝒃𝒏−𝟏𝒃𝒏−𝟐 … 𝒃𝟏𝒃𝟎 𝑺𝒏−𝟏 … 𝑺𝟏𝑺𝟎 𝑪𝒏 𝑪𝒏−𝟏 … 𝑪𝟏 ai bi Si 0 0 0 0 1 0 10 0 11 1 carryi carryi+1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 Full Adder (II) • Binary addition • N 1-bit additions • SOP of 1-bit addition 17 𝒂𝒏−𝟏𝒂𝒏−𝟐 … 𝒂𝟏𝒂𝟎 𝒃𝒏−𝟏𝒃𝒏−𝟐 … 𝒃𝟏𝒃𝟎 𝑺𝒏−𝟏 … 𝑺𝟏𝑺𝟎 𝑪𝒏 𝑪𝒏−𝟏 … 𝑪𝟏 ai bi Si 0 0 0 0 1 0 10 0 11 1 carryi carryi+1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1 Full Adder ai bi ci ai bi ci ci+1 si Full Adder (1 bit) 4-Bit Adder from Full Adders • Creating a 4-bit adder out of 1-bit full adders • To add two 4-bit binary numbers A and B 18 𝒂𝟑 𝒂𝟐 𝒂𝟏 𝒂𝟎 𝒃𝟑 𝒃𝟐 𝒃𝟏 𝒃𝟎 𝒔𝟑 𝒔𝟐 𝒔𝟏 𝒔𝟎 𝒄𝟒 𝒄𝟑 𝒄𝟐 𝒄𝟏 + 𝟏 𝟎 𝟏 𝟏 𝟏 𝟎 𝟎 𝟏 𝟎 𝟏 𝟎 𝟎 𝟏 𝟎 𝟏 𝟏 + Full Adder a0b0 s0 0c1 Full Adder a1b1 s1 c2 Full Adder a2b2 s2 c3 Full Adder a3b3 s3 c4 Adder Design: Ripple Carry Adder • Delay propagation problem 19 Adder Design: Carry Lookahead Adder 20 ALU (Arithmetic Logic Unit) 21 ALU (Arithmetic Logic Unit) • Combines a variety of arithmetic and logical operations into a single unit (that performs only one function at a time) • Usually denoted with this symbol: Example ALU (Arithmetic Logic Unit) 23 Tri-State Buffer 24 Tri-State Buffer • A tri-state buffer enables gating of different signals onto a wire • Floating signal (Z): Signal that is not driven by any circuit • Open circuit, floating wire 25 Example: Use of Tri-State Buffers • Imagine a wire connecting the CPU and memory • At any time only the CPU or the memory can place a value on the wire, both not both • You can have two tri-state buffers: one driven by CPU, the other memory; and ensure at most one is enabled at any time 26 Example Design with Tri-State Buffers 27 CPU Memory GateMem GateCPU Shared Bus Another Example • Shared Bus is a common line between peripherals • All of the devices connected with Tri-State Buffers • When a device use the shared bus all other buffers are disconnected. 28 Multiplexer Using Tri-State Buffers 29 Karnaugh Maps (K-Maps) 30 Complex Cases • One example • Problem • Easy to see how to apply Uniting Theorem… • Hard to know if you applied it in all the right places… • …especially in a function of many more variables • Question • Is there an easier way to find potential simplifications? • i.e., potential applications of Uniting Theorem…? • Answer • Need an intrinsically geometric representation for Boolean f( ) • Something we can draw, see… 31 𝑪𝒐𝒖𝒕 = ഥ𝑨𝑩𝑪 + 𝑨ഥ𝑩𝑪 + 𝑨𝑩ഥ𝑪 + 𝑨𝑩𝑪 Karnaugh Map • Karnaugh Map (K-map) method • K-map is an alternative method of representing the truth table that helps visualize adjacencies in up to 6 dimensions • Physical adjacency ↔ Logical adjacency 32 2-variable K-map 0 1 0 00 01 1 10 11 Numbering Scheme: 00, 01, 11, 10 is called a “Gray Code” — only a single bit (variable) changes from one code word and the next code word 00 01 11 10 00 0000 0001 0011 0010 01 0100 0101 0111 0110 11 1100 1101 1111 1110 10 1000 1001 1011 1010 3-variable K-map 4-variable K-map 00 01 11 10 0 000 001 011 010 1 100 101 111 110 𝑨𝑩𝑨 𝑩 𝑪𝑫 𝑨 𝑩𝑪 Karnaugh Map Methods 33 Adjacent 000 001 010 011 110 111 100 101 000 001 010 011 110 111 100 101 Adjacent K-map adjacencies go “around the edges” Wrap around from first to last column Wrap around from top row to bottom row 00 01 11 10 0 000 001 011 010 1 100 101 111 110 𝑨 𝑩𝑪 K-map Cover - 4 Input Variables 34 00 01 11 10 00 1 0 0 1 01 0 1 0 0 11 1 1 1 1 10 1 1 1 1 𝑨𝑩 𝑪𝑫 Strategy for “circling” rectangles on Kmap: As big as possible Biggest “oops!” that people forget: Wrap-arounds 𝐅 = 𝐀 + ഥ𝑩ഥ𝑫 + 𝐁ഥ𝑪𝑫𝐀 + ഥ𝑩ഥ𝑫𝐀 Logic Minimization Using K-Maps • Very simple guideline: • Circle all the rectangular blocks of 1’s in the map, using the fewest possible number of circles • Each circle should be as large as possible • Read off the implicants that were circled • More formally: • A Boolean equation is minimized when it is written as a sum of the fewest number of prime implicants • Each circle on the K-map represents an implicant • The largest possible circles are prime implicants 35 K-map Rules • What can be legally combined (circled) in the K-map? • Rectangular groups of size 2k for any integer k • Each cell has the same value (1, for now) • All values must be adjacent • Wrap-around edge is okay • How does a group become a term in an expression? • Determine which literals are constant, and which vary across group • Eliminate varying literals, then AND the constant literals • constant 1 ➙ use 𝐗, constant 0 ➙ use ഥ𝑿 • What is a good solution? • Biggest groupings ➙ eliminate more variables (literals) in each term • Fewest groupings ➙ fewer terms (gates) all together • OR together all AND terms you create from individual groups 36 K-map Example: Two-bit Comparator Design Approach: Write a 4-Variable K-map for each of the 3 output functions 37 A B C D F1 F2 F3 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0 A F1 AB = CD B F2 AB < CD C F3 AB > CD D K-map Example: Two-bit Comparator (2) 38 00 01 11 10 00 1 01 1 11 1 10 1 K-map for F1 𝑨𝑩 𝑪𝑫 A B C D F1 F2 F3 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0F1 = A'B'C'D' + A'BC'D + ABCD + AB'CD' 𝑨 𝑩 𝑫 𝑪 K-map Example: Two-bit Comparator (3) 39 A B C D F1 F2 F3 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 1 0 0 1 1 1 0 1 0 1 0 0 0 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 1 1 0 0 0 1 1 1 1 1 1 0 0 00 01 11 10 00 1 1 1 01 1 1 11 10 1 K-map for F2 𝑨𝑩 𝑪𝑫 F2 = A'C + A'B'D + B'CD F3 = ? (Exercise for you) 𝑨 𝑩 𝑫 𝑪 Sequential Logic Circuits and Design • Circuits that can store information • Cross-coupled inverter • R-S Latch • Gated D Latch • D Flip-Flop • Register 40 Introduction • Combinational circuit output depends only on current input • We want circuits that produce output depending on current and past input values – circuits with memory • How can we design a circuit that stores information? 41 Capturing Data 42 Basic Element: Cross-Coupled Inverters • Has two stable states: Q=1 or Q=0. • Has a third possible “metastable” state with both outputs oscillating between 0 and 1 (we will see this later) • Not useful without a control mechanism for setting Q Image source: Harris and Harris, Digital Design and Computer Architecture, 2nd Ed., p.110. 43 More Realistic Storage Elements • Have a control mechanism for setting Q • We will see the R-S latch soon • Let’s look at an SRAM (static random access memory) cell first • We will get back to SRAM (and DRAM) later wordline bitline bitline SRAM cell 44 The Big Picture: Storage Elements • Latches and Flip-Flops • Very fast, parallel access • Very expensive (one bit costs tens of transistors) • Static RAM (SRAM) • Relatively fast, only one data word at a time • Expensive (one bit costs 6+ transistors) • Dynamic RAM (DRAM) • Slower, one data word at a time, reading destroys content (refresh), needs special process for manufacturing • Cheap (one bit costs only one transistor plus one capacitor) • Other storage technology (flash memory, hard disk, tape) • Much slower, access takes a long time, non-volatile • Very cheap 45 Basic Storage Element: The R-S Latch 46 The R-S (Reset-Set) Latch • Cross-coupled NAND gates • Data is stored at Q (inverse at Q’) • S and R are control inputs • In quiescent (idle) state, both S and R are held at 1 • S (set): drive S to 0 (keeping R at 1) to change Q to 1 • R (reset): drive R to 0 (keeping S at 1) to change Q to 0 • S and R should never both be 0 at the same time S R Q’ Q Input Output R S Q 1 1 Qprev 1 0 1 0 1 0 0 0 Forbidden 47 10 Why not R=S=0? 1. If R=S=0, Q and Q’ will both settle to 1, which breaks our invariant that Q = !Q’ 2. If S and R transition back to 1 at the same time, Q and Q’ begin to oscillate between 1 and 0 because their final values depend on each other (metastability) • This eventually settles depending on variation in the circuits S R Q’ Q Input Output R S Q 1 1 Qprev 1 0 1 0 1 0 0 0 Forbidden 10 0 01 1 48 The Gated D Latch 49 The Gated D Latch • How do we guarantee correct operation of an R-S Latch? S R Q’ Q 50 The Gated D Latch • How do we guarantee correct operation of an R-S Latch? • Reduce the number of states to three: • WE/Clock =1, D=1, Q=1 • WE/Clock =1, D=0, Q=0 • WE/Clock =0, D=X • Q takes the value of D, when write enable (WE) is set to 1 • S and R can never be 0 at the same time! S R Q’ Q WE/ Clock D 51 Input Output WE D Q 0 0 Qprev 0 1 Qprev 1 0 0 1 1 1 The Register 52 The Register D Q How can we use D latches to store more data? • Use more D latches! • A single Clock signal for all latches for simultaneous writes D2 Q2 D1 Q1 D0 Q0 3 3 Clock Here we have a register, or a structure that stores more than one bit and can be read from and written to This register holds 4 bits, and its data is referenced as Q[3:0] 53 The Register How can we use D latches to store more data? • Use more D latches! • A single Clock signal for all latches for simultaneous writes Register x (Rx) D3:0 Q3:0 WE 4 4 Here we have a register, or a structure that stores more than one bit and can be read from and written to This register holds 4 bits, and its data is referenced as Q[3:0] 54","libVersion":"0.2.4","langs":""}